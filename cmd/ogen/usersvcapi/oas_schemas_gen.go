// Code generated by ogen, DO NOT EDIT.

package usersvcapi

import (
	"fmt"

	"github.com/go-faster/errors"
	"github.com/google/uuid"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// AddUserCreated is response for AddUser operation.
type AddUserCreated struct{}

// DeleteUserOK is response for DeleteUser operation.
type DeleteUserOK struct{}

// Represents error object.
// Ref: #/components/schemas/Error
type Error struct {
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

// Ref: #/components/schemas/User
type User struct {
	ID        uuid.UUID  `json:"id"`
	Name      string     `json:"name"`
	LastName  string     `json:"last_name"`
	Birthdate string     `json:"birthdate"`
	Status    UserStatus `json:"status"`
}

// GetID returns the value of ID.
func (s *User) GetID() uuid.UUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *User) GetName() string {
	return s.Name
}

// GetLastName returns the value of LastName.
func (s *User) GetLastName() string {
	return s.LastName
}

// GetBirthdate returns the value of Birthdate.
func (s *User) GetBirthdate() string {
	return s.Birthdate
}

// GetStatus returns the value of Status.
func (s *User) GetStatus() UserStatus {
	return s.Status
}

// SetID sets the value of ID.
func (s *User) SetID(val uuid.UUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *User) SetName(val string) {
	s.Name = val
}

// SetLastName sets the value of LastName.
func (s *User) SetLastName(val string) {
	s.LastName = val
}

// SetBirthdate sets the value of Birthdate.
func (s *User) SetBirthdate(val string) {
	s.Birthdate = val
}

// SetStatus sets the value of Status.
func (s *User) SetStatus(val UserStatus) {
	s.Status = val
}

type UserStatus string

const (
	UserStatusACTIVE   UserStatus = "ACTIVE"
	UserStatusINACTIVE UserStatus = "INACTIVE"
)

// AllValues returns all UserStatus values.
func (UserStatus) AllValues() []UserStatus {
	return []UserStatus{
		UserStatusACTIVE,
		UserStatusINACTIVE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UserStatus) MarshalText() ([]byte, error) {
	switch s {
	case UserStatusACTIVE:
		return []byte(s), nil
	case UserStatusINACTIVE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserStatus) UnmarshalText(data []byte) error {
	switch UserStatus(data) {
	case UserStatusACTIVE:
		*s = UserStatusACTIVE
		return nil
	case UserStatusINACTIVE:
		*s = UserStatusINACTIVE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type Users []User
